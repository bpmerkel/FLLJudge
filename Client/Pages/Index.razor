@page "/"
@inject Task<Model> _getModel
@inject IDialogService DialogService

<PageTitle>FLL Judge Comments</PageTitle>

<MudLayout>
    <MudMainContent Class="pt-0">
        @if (model != null)
        {
            <MudAppBar Color="Color.Primary" Fixed="false" Dense="true">
                <MudText Typo="Typo.h4">FLL Judge Comments App</MudText>
                <MudSpacer />
                <MudTooltip Text="Show selections only">
                    <MudCheckBox @bind-Checked="@FilterOn"
                                 Disabled="@(!model.Areas.Any(a => a.Comments.Any(c => c.Selected)))"
                                 Color="Color.Warning" UnCheckedColor="@Color.Success"
                                 Dense="true"
                                 CheckedIcon="@Icons.Material.Filled.FilterListOff"
                                 UncheckedIcon="@Icons.Material.Filled.FilterList">
                        <MudText Typo="Typo.body2" Inline="true">@(FilterOn ? "SHOW ALL" : "SHOW SELECTIONS")</MudText>
                    </MudCheckBox>
                </MudTooltip>
                    <MudTooltip Text="Clear all selections">
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ClearAll" OnClick="@DoReset" Color="Color.Warning">Clear All</MudButton>
                    </MudTooltip>
                    <MudSpacer />
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Help" Color="Color.Success" @onclick="OpenWelcomeDialog">Welcome</MudButton>
            </MudAppBar>

            <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Warning" ApplyEffectsToContainer="true" AlwaysShowScrollButtons="true">
                <ChildContent>
                    @foreach (var area in model.Areas)
                    {
                        <MudTabPanel Text="@area.Name" BadgeDot="@(!area.Comments.Any(c => c.Selected))" BadgeData="@area.Comments.Count(c => c.Selected)" BadgeColor="@(area.Comments.Any(c => c.Selected) ? Color.Error : Color.Transparent)">
                            @if (!FilterOn)
                            {
                                <MudChipSet MultiSelection="true" Filter="true" @bind-SelectedChips="selected">
                                    @foreach (var tag in area.Tags)
                                    {
                                        <MudChip Text="@tag.Text" Variant="Variant.Text" Color="Color.Warning">@tag.Text (@tag.Count)</MudChip>
                                    }
                                </MudChipSet>
                            }
                            <MudList Clickable="true" Dense="true" @bind-SelectedItem="selectedItem" Color="Color.Primary">
                                @foreach (var section in area.Comments.GroupBy(c => c.Section).Select(g => new { section = g.Key, comments = g.ToList() }))
                                {
                                    <MudListItem Expanded="true" InitiallyExpanded="true">
                                        <ChildContent>
                                            <MudText Typo="Typo.h5" Color="Color.Secondary">@getSectionName(section.section)</MudText>
                                        </ChildContent>
                                        <NestedList>
                                            @foreach (var comment in section.comments)
                                            {
                                                @if (!FilterOn || (FilterOn && comment.Selected))
                                                {
                                                    <MudListItem>
                                                        <MudCheckBox @bind-Checked="comment.Selected" Dense="true" Color="@Color.Primary">
                                                            <MudHighlighter Class="mud-warning-text"
                                                                            Style="background-color:transparent;font-weight:bold;font-size:18pt"
                                                                            Text="@comment.Text"
                                                                            UntilNextBoundary="true"
                                                                            CaseSensitive="false"
                                                                            Markup="true"
                                                                            HighlightedTexts="@searchTerms" />
                                                        </MudCheckBox>
                                                    </MudListItem>
                                                }
                                            }
                                        </NestedList>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudTabPanel>
                    }
                </ChildContent>
            </MudTabs>
        }
    </MudMainContent>
</MudLayout>

@code
{
    Model model;
    MudChip[] selected;
    MudListItem selectedItem;
    IEnumerable<string> searchTerms => selected == null
        ? new string[] { }
        : selected.Select(c => c.Text);
    bool FilterOn;

    protected override async Task OnInitializedAsync()
    {
        model = await _getModel;
        StateHasChanged();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            OpenWelcomeDialog();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private void OpenWelcomeDialog() => DialogService.Show<WelcomeDialog>("Welcome", new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            CloseButton = true,
            DisableBackdropClick = true,
            NoHeader = false,
            Position = DialogPosition.Center,
            CloseOnEscapeKey = true
        });

    string getSectionName(Comment.Sections section) => section switch
    {
        Comment.Sections.ThinkAbout => "Think about...",
        Comment.Sections.GreatJob => "Great job...",
        _ => section.ToString()
    };

    void DoReset(MouseEventArgs e)
    {
        // perform a reset by clearing all selected comments and unchecking chips
        model.Areas.ForEach(a =>
        {
            a.Comments.ForEach(c => c.Selected = false);
        });

        selected = new MudChip[] { };
        selectedItem = null;
        FilterOn = false;
        StateHasChanged();
    }
}