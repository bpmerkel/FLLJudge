@page "/"
@inject Task<Model> _getModel

<PageTitle>FLL Judge Comments</PageTitle>

@if (model != null)
{
    <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary">
        @foreach (var area in model.Areas)
        {
            <MudTabPanel Text="@area.Name" BadgeDot="@(!area.Comments.Any(c => c.Selected))" BadgeData="@area.Comments.Count(c => c.Selected)" BadgeColor="@(area.Comments.Any(c => c.Selected) ? Color.Error : Color.Transparent)">
                <MudChipSet MultiSelection="true" Filter="true" @bind-SelectedChips="selected">
                    @foreach (var tag in area.Tags)
                    {
                        <MudChip Text="@tag" Variant="Variant.Text" Color="Color.Primary">@tag</MudChip>
                    }
                </MudChipSet>
                <MudList Clickable="true" Dense="true" @bind-SelectedItem="selectedItem" Color="Color.Primary">
                    @foreach (var section in area.Comments.GroupBy(c => c.Section).Select(g => new { section = g.Key, comments = g.ToList() }))
                    {
                        <MudListItem Text="@getSectionName(section.section)" Expanded="true" InitiallyExpanded="true" Style="font-size:16pt;font-weight:bold">
                            <NestedList>
                                @foreach (var comment in section.comments)
                                {
                                    <MudListItem>
                                        <MudCheckBox @bind-Checked="comment.Selected" Dense="true" Color="@Color.Primary">
                                            <MudHighlighter Class="mud-success-text"
                                                            Style="background-color:transparent;font-weight:bold"
                                                            Text="@comment.Text"
                                                            UntilNextBoundary="true"
                                                            CaseSensitive="false"
                                                            Markup="true"
                                                            HighlightedTexts="@searchTerms" />
                                        </MudCheckBox>
                                    </MudListItem>
                                }
                            </NestedList>
                        </MudListItem>
                    }
                </MudList>
            </MudTabPanel>
        }
    </MudTabs>
}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
}


@code
{
    Model model;
    MudChip[] selected;
    MudListItem selectedItem;
    IEnumerable<string> searchTerms => selected == null
        ? new string[] { }
        : selected.Select(c => c.Text);

    protected override async Task OnInitializedAsync()
    {
        model = await _getModel;
        Console.WriteLine(model);
        StateHasChanged();
    }

    string getSectionName(Comment.Sections section) => section switch
    {
        Comment.Sections.ThinkAbout => "Think about...",
        Comment.Sections.GreatJob => "Great job...",
        _ => section.ToString()
    };
}